//! Type definitions for node specification and state used in persistent storage and trace formats

use serde::{Deserialize, Serialize};

use std::collections::HashMap;

use crate::core::common::Resources;

// We can differ two type of node id:
//   1) id (type SimComponentId) of a Node simulation component (generated from a Simulation)
//   2) id (type NodeId) of a Node as object from trace (generated by User/Trace) for the purpose
//     of node deletion.
pub type NodeId = u32;

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
pub struct NodeSpec {
    // Id of node which comes from a trace
    pub id: NodeId,
    // Total resource of a node
    capacity: Resources,
    #[serde(default)]
    attributes: HashMap<String, String>,
}

impl NodeSpec {
    pub fn new(id: NodeId, capacity: Resources, attributes: HashMap<String, String>) -> Self {
        Self {
            id,
            capacity,
            attributes,
        }
    }
}

#[derive(Default, Debug, Deserialize, Serialize, Clone, PartialEq)]
pub enum NodeState {
    #[default]
    Undefined,
}

#[derive(Serialize, Clone, Debug)]
pub struct NodeInfo {
    pub spec: NodeSpec,
    // Remaining amount of resources on a node
    allocatable: Resources,
    state: NodeState,
}

impl NodeInfo {
    pub fn new(spec: NodeSpec) -> Self {
        let capacity = spec.capacity.clone();
        Self {
            spec,
            allocatable: capacity,
            state: Default::default(),
        }
    }
}
